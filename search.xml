<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[SublimeText3_实用配置]]></title>
      <url>%2F2017%2F04%2F18%2FSublimeText3-%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[介绍Sublime Text 3 是一个了不起的软件。 干净，实用，可以快速的编写代码编辑器 多行编辑 支持插件，代码片段和其他许多东西 官网下载 Features（功能）Command Palette （命令面板）ctrl + shift + p Mac：command + shift + p 命令面板可以使你访问设置菜单中可以所有的东西，调用包命令，更改文件的语法，处理Sublime项目，等等。举例来说，你可以在命令面板中Git命令添加，分支，提交和推送。 File Switching （文件切换）ctrl + p Mac：command + p Sublime Text提供了一个非常快速的方式来打开新的文件。只要按下Ctrl+ P并开始输入你想要打开的文件的名称。一旦找到文件，只需按enter键，就可以开始直接输入到该文件了！ 使用 ： ctrl + p Goto Symbols （跳转标记）ctrl + r Mac : command + r 当你编辑一个大文件时，文件中有一堆方法，按 Ctrl + R 将其全部列出来，使他们更容易找到。开始尝试的输入你想要的，然后按 Enter 就可以快速跳转这个方法了。 Multi-Edit（多行编辑）ctrl + click Mac: command + click 使用它之后，就很难再回到其他文本编辑器，很多编辑器，IDE现在都有这功能了，比如：WebStorm ctrl + d : 选中光标所占的文本，继续操作则会选中下一个相同的文本。 Mac：command + d alt+f3 选择当前文件所有匹配项 ctrl + command + G 多重文本光标选中（再也不用⌘ D一个一个的找啦） 选择文件中的所有匹配项。小心使用这个，因为它能选择一个文件中的所有匹配项. . ctrl + shift + L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。 Mac : command + shift + L 常用快捷键 大写ctrl+k+u、小写ctrl+k+L ctrl+/：注释选中项/行 ctrl+shift+`（ESC键下面的那个） Mac : command + shift + k 你希望所有属性保持不变，但只是想选择标签。这个快捷键为你这样做，会注意到你可以在一次操作多个标签。ps：需要Emmet插件 ctrl+shift+a 向上扩展一层 Mac ： command + shift + j 如果你把光标放在文本间再按下上面的键将选择文本，就像ctrl+d。但是再次按下它，将选择父容器，再按，将选择父容器的父容器。ps：需要Emmet插件 ctrl+shift+m ： 选择括号内的内容 Mac : ctrl + shift + m 这有助于选择括号之间的一切。同样适用于CSS。 ctrl+shift+k: 删除一行 Mac : ctrl + shift + k ctrl+shift+d: 复制行或选中项 Mac : command + shift + d ctrl + shift + f 和 alt + enter : 在你的文件查找一个文本，然后将其全部选中 ctrl + L 选中整行，继续操作则继续选择下一行，效果和 shift + ↓ 效果一样。 alt+shift+w: 用标签包裹行或选中项 Mac : ctrl + shift + w ctrl+shift+↑ 和ctrl+shift+↓：整行的上下移动 Mac : ctrl + command + ↑ 和 ctrl + command + ↓ shift + ↑ 向上选中多行。 shift + ↓ 向下选中多行 ctrl+[ 和 ctrl+ ] : 增加和减少缩进 Mac : command + [ , command + ] Snippets（代码片段）我们在开发中有很多代码是需要重复编写的，每一次都去复制粘贴显然是一件效率极其低下的事情，sublime的自定义代码片段功能就很好的解决了这个问题。下面就来看一下如何在sublime中自定义代码片段 首先在菜单栏选择：Tools -&gt;developer -&gt; New Snippet可以看到新建一个xml类型的描述文件，如下： 12345678910&lt;snippet&gt; &lt;content&gt;&lt;![CDATA[Hello, $&#123;1:this&#125; is a $&#123;2:snippet&#125;.]]&gt;&lt;/content&gt; &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt; &lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt; &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt; &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;&lt;/snippet&gt; 注释已经非常详细了，content 里面就是代码模版：${序号：默认值} ，序号相同的地方光标会同时停在那可以多处同时编辑。序号大小就是 tabindex。在实际使用代码的时候，可以使用 tab 切换光标位置。 以hexo新建一篇博客头部为例： 12345678910111213141516&lt;snippet&gt; &lt;content&gt; &lt;![CDATA[title: $&#123;1:标题&#125;date: $&#123;2:2015-12-26 15:26:17&#125;tags: [$&#123;3:标签&#125;]categories: [$&#123;4:分类&#125;]]]&gt; &lt;/content&gt; &lt;!-- 可选：快捷键，利用Tab自动补全代码的功能 --&gt; &lt;tabTrigger&gt;hexoH&lt;/tabTrigger&gt; &lt;!-- 可选：使用范围，不填写代表对所有文件有效。附：source.css和test.html分别对应不同文件。 --&gt; &lt;!-- &lt;scope&gt;source.md&lt;/scope&gt; --&gt; &lt;!-- 可选：在snippet菜单中的显示说明（支持中文）。如果不定义，菜单则显示当前文件的文件名。 --&gt; &lt;description&gt;hexo博客头部生成&lt;/description&gt;&lt;/snippet&gt; 设置完毕，最后还差一步，要想代码片段生效，还必须保存到sublime的文件目录\Data\Packages\User，文件名任意，但文件后缀必须为.sublime-snippet。 现在输入hexoH试试，你想要的代码片段是不是已经有了呢？ Keyboard Shortcuts （快捷键）Sublime Text的快捷键的数量是惊人的。我觉得这是Sublime Text另一个好的功能。如果太多了，你可以将自己常用的快捷键从主键（ home keys ）移到了自己的快捷键列表中（my keyboard）。 对于Sublime Text键盘快捷键的完整列表，看看我们的键盘快捷键文章。 https://scotch.io/bar-talk/sublime-text-keyboard-shortcuts Projects（项目）在Sublime Text中，项目是工作流程中不可或缺的一部分。一个项目仅仅是一个 Sublime工作空间，项目中的文件夹都是开放的，并显示在侧边栏中。这是很有帮助的，因为你可以定义一个项目，并添加文件夹到项目中，并能够迅速地在文件夹之间切换。 使用项目，你只需要去Windows资源管理器或Finder中找到你想要的项目，并将其拖到Sublime Text，就可以了。 保存一个项目：进入命令面板，输入保存项目。 切换项目： ctrl + alt + p 插件官方插件下载地址 Package Control（包控制）Sublime Text提供了绝对必要的包管理器。这是安装下面列出的所有插件和主题的最佳方式。继续，在包控制在安装插件。 使用方法：进入命令面板（ ctrl + shift + p ），然后键入 install 。 包控制将加载所有可用于安装的包。看看你可以查找并安装自己喜欢的包.. AligmentAligment插件让开发者自动对齐代码，包括PHP、CSS、JavaScript语言。使得代码看起来更整齐美观，更具可读性。 插件下载：https://github.com/wbond/sublime_alignment BracketHighlighter该插件提供行数列高亮的各种配对的语法符号。就是将配对的括号等显示在行数列上） Colorpicker使用一个取色器改变颜色 使用方法 : ctrl + shift + c 注：该插件在Mac上使用时非常漂亮 AutoprefixerCSS3前缀补充插件 要装Node.js，没有的话去下载安装吧插件使用CanIUse资料库，能精准判断哪些属性需要什么前缀 Tips:使用方法：在输入CSS3属性后（冒号前）按Tab键 EmmetEmmet绝对的节省时间。您可以轻松快速地编写HTML。 使用方法: ctrl + alt + enter ,并且开始输入Emmet风格的HTML 1div.main*2&gt;ul&gt;li*4&gt;a 看看我们的 Emmet指南 ，以了解更多，并自己尝试Emmet。 Emmet使用手册 DocBlockr一个真正简单的方式来轻松地创建许多语言包括JavaScript，PHP和CoffeeScript的文档块。只要在函数的上面输入 /** ，按 Tab 就可以了。DocBlockr会观察函数需要的变量名和类型，并创建文档块。 HTML-CSS-JavaScript代码格式化 默认快捷键：Ctrl+Shift+H better Completion涵盖了html, jquery，javascript，Bootstrap的代码片段。 官网详细配置; Color HighlighterCSS颜色高亮 AutoFileName使用说明：文件名自动补全 AdvancedNewFile快捷的新增文件 ctrl + alt + n SublimeCodeInte使用说明：Sublime​Code​Intel 是一个代码提示、补全插件，支持 JavaScript、Mason、XBL、XUL、RHTML、SCSS、Python、HTML、Ruby、Python3、XML、Sass、XSLT、Django、HTML5、Perl、CSS、Twig、Less、Smarty、Node.js、Tcl、TemplateToolkit 和 PHP 等语言，是 Sublime Text 自带代码提示功能的很好扩展。 Git这个插件会将Git整合进你的SublimeText，使的你可以在SublimeText中运行Git命令，包括添加，提交文件，查看日志，文件注解以及其它Git功能 可视化的操作：帮助你与你的Git repo协议进行交互。它支持很多命令像init,push, pull, branch, stash,等等。了解更多关于你在Sublime Text里面究竟能使用哪些Git功能，以提高您的工作流程。 使用参考 GitGutter:Sublime Text 有了 Git 插件之后，GitGutter 更好的帮助开发者查看文件之前的改动和差异，提升开发效率。（其实我是冲着这个来的） Terminal使用说明：调出终端直接进入项目所在根目录，这个插件与gulp配合很好用快捷键：ctrl+shift+t SidebarEnhancements在侧边栏的文件上右击时，这个插件提供了大量更多的选择。打开，查找，复制和粘贴，等等,可以在浏览器中打开，还可以配置不同文件的打开方式。 这里是老菜单和SidebarEnhanced菜单的比较。 快捷在不同浏览器打开配置： 1234567891011121314151617181920212223242526272829[ &#123; &quot;keys&quot;: [&quot;f1&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;,//你的浏览器路径 &quot;extensions&quot;: &quot;.*&quot; //匹配任何文件类型 &#125; &#125;, &#123;//firefox &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;D:\\浏览器\\火狐\\firefox.exe&quot;, &quot;extensions&quot;: &quot;.*&quot; &#125; &#125;, &#123; //ie &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;C:\\Program Files\\Internet Explorer\\iexplore.exe&quot;, &quot;extensions&quot;: &quot;.*&quot; &#125; &#125;] Markdown Editing 和 Markdown Preview，实现预览MD 当在 Sublime Text 中编写 markdown 文件时，在浏览器中打开全是乱码，因为还没有将 markdown 文件解析成相应的 HTML. 这两个插件的功能就是可以用浏览器浏览 Sublime Text 中编写的 markdown文件。 配置：打开 Preferences-&gt;Package Settings-&gt;Markdown Preview-&gt;Setting User 将下面这句话粘贴进去。 123456789&#123; // &quot;浏览markdown的浏览器的路径&quot; &quot;browser&quot; : &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;&#125;//打开Preferences-&gt;Key Binding User，添加下面一句话。&#123; &quot;keys&quot;: [&quot;f6&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125;&#125;,//keys的值是以上面浏览器预览markdown文件。 直接按F6就可以打开浏览器预览markdown，并且它们的安装还会让编写markdown时支持一些快捷键。 Themes （主题）Sublime Text可以安装主题，有一些主题真的很酷。您可以使用包控制找到这些。使用包控制安装一个主题，然后更新您的用户设置,使用它。 1234// User/Preferences.sublime-settings&#123; &quot;theme&quot;: &quot;Soda Light.sublime-theme&quot;&#125; 注意： 您可能必须重新启动Sublime Text，这些更改才会生效。 一些流行的主题： THEME – SODA包括 LIGHT 和 DARK THEME – FLATLAND PREDAWN Flatland的一个分支。 repo SPACEGRAY “一个Hyperminimal UI主题”。这里有 更多的相关资料 。 Color Schemes (配色方案)除了改变你的主题，你也可以改变你的配色方案。这不同于主题，因为主题是Sublime Text的包。配色方案仅仅是配色方案文件，并更改您的设置。 更改配色方案：菜单， Preferences 首选项&gt; Color Scheme 配色方案，并选择一个。 Settings（设置）Sublime自带了大量的设置。我建议你去看看它所提供的所有设置。 为了让您进入用户设置，使用命令面板并且键入 user 。 12345678910111213141516171819202122// User/Preferences.sublime-settings &#123; &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme&quot;,//主题， &quot;theme&quot;: &quot;Material-Theme-Darker.sublime-theme&quot;,//侧边栏样式，需要安装该主题才可以使用 &quot;draw_minimap_border&quot;: true, // 右侧缩略图边框 &quot;font_face&quot;: &quot;Monaco&quot;,//字体 &quot;font_size&quot;: 10, // 字体大小 &quot;highlight_line&quot;: true, // 当前行标亮 &quot;save_on_focus_lost&quot;: true, // 当前行标亮 &quot;word_separators&quot;: &quot;./\\()\&quot;&apos;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?&quot;, // 双击选中中划线 &quot;word_wrap&quot;: true, //自动换行 &quot;trim_trailing_white_space_on_save&quot;: true, //自动移除行尾多余空格 &quot;ensure_newline_at_eof_on_save&quot;: true, //文件末尾自动保留一个空行 &quot;disable_tab_abbreviations&quot;: true, //禁用 Emmet 的 tab 键功能（请使用 ctrl+e） &quot;translate_tabs_to_spaces&quot;: true, //把代码 tab 对齐转换为空格对齐 &quot;tab_size&quot;: 4, //空格数 &quot;fade_fold_buttons&quot;: false, //显示代码块的倒三角 &quot;bold_folder_labels&quot;: true, //侧边栏文件夹加粗 &quot;auto_find_in_selection&quot;: true //开启选中范围内搜索&#125; 参考链接： 一个前端程序猿的Sublime Text3的自我修养Sublime Text 3最好的功能、插件和设置]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F04%2F18%2Fpublic%2FSublime-snippet%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[学习的方法]]></title>
      <url>%2F2017%2F04%2F09%2F%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[摘自得到专栏 | 伯凡日知录 以前我们讲到过曾国藩的读书方法，他说读书一定要攻城掠地，不要一个村庄、一个小镇地那样去打仗，那样是不可能最终取胜的。该攻的据点你一定要攻，该打长沙就打长沙，该打安庆就打安庆，你才可能赢得最终的胜利。 他的意思是说，读书一定要读那些让你望而生畏，但是你必须要读的那些书，你读完这些书的时候，其他的小村庄、小城镇根本不在话下。有的人一辈子也读了不少书，但是他遇到据点型的书的时候，他往往是绕道而走，总是让自己的智力与那些小村庄、小城镇式的书相处，那样你是不可能成为一个真正的读书人。 曾国藩的很多学习理论都跟他打仗的经历有关，曾国藩是一个天资很低的人，他自己都认为自己的资质是中等偏下，我们这么认为。但是他在仕途、在军事上取得了很多智力高超的人难望其项背的奇迹，具体我们就不说了，我们只说他打仗的六字诀，“扎硬寨、打呆仗”。 ==扎硬寨：== 扎硬寨，就是每到一个地方，第一件事情就是扎寨，动员所有的兵力挖战壕，你就是千军万马，你就是天兵天将，我不在乎，我只要把我的寨子扎稳，你就拿我没办法，他常常用这种方式把对手给耗死。 ==打呆仗：== 打呆仗，就是我不给你玩什么花活，我就是用最简单的方法跟你打，你还以为我在搞什么高明的战略战术，就像美国人打伊拉克的时候，发现伊拉克毫无抵抗的时候，觉得可能是里头有一个巨大的阴谋，以为萨达姆在玩空城计什么的。 曾国藩就是用最简单的方法来对抗你，结果就是用他的呆、用他的笨来稳扎稳打，步步为营。 今天我之所以要说到曾国藩打仗，是因为我想到了学习这件事情。前几日我提到有同学在“得到”上一订十五个专栏，这样的学习精神真的是很值得佩服。但我要做一个提醒，这个提醒就跟我们今天的话题有关，学习就有点像打仗，首先你要问你现在的核心知识是什么，你要给自己做一个知识清单，这个核心知识也就是你的知识大本营。 每一个人都有自己的知识大本营，那么如何打仗呢？就是从自己的大本营出发，去讨伐对手。你之所以能够去出征，是因为你有一个根据地，你有一个大本营，而且你打着打着还要回到你的大本营休息，补充给养，以逸待劳，然后再出击，这是一种学习理论。 我们经常把学和习连在一起，但是学和习是很不一样的。 所谓的学就是从一个领域的核心知识出发，向外探索并接触新事物。但是随后你要返回你的知识大本营，重新整合你已经了解的新的片段，然后再次出去探索新的东西，一次次地来来回回，你能够将已经接触的新的知识归入到你既有的核心知识的大本营当中。简单地说，是你要在你的核心知识内部建立一种连接，你的内部连接把一个个碎片化的新的信息，用你原来的知识系统进行连接，这里头还有一个非常重要的过程，就是通过不断地重复已经知道的东西，让你的大脑，让你的新知逐渐地下沉，到你的下丘脑，进入下丘脑以后，不断重复的过程就不再是学，而叫习。 通过学而时习之，你的新的知识就会变成一种意识自动化，什么叫意识自动化？老司机开车就是意识自动化，甚至在接电话的时候一点儿都不耽误。他的开车的行为已经是受他的意识自动化的控制。再比如我们经常会出现这种情况，一出门怀疑自己没锁门，然后“噔噔噔”爬上去，发现门已经锁得好好的。为什么会出现这种情况？就是你过多次地重复以后，你的知识和技能已经变成意识自动化了，下丘脑的所有的意识活动，它是不上报到大脑皮层的，所以你就根本没有意识到你已经干过了。 我们说学习学习，不是为学习而学习，首先是从学接触陌生的、新鲜的，具有挑战性的，让你感到不适的信息，然后将通过多次的重复，也就是习，将新的知识内化为你的意识，变成一种意识自动化，你的专业技能也就形成了。所以不在于积累新的知识，而在于内化信息的片段。当然我们说我学会了一个什么东西，常常表现为记住了，你记住了没有？当我说记住的时候，就意味着我学会了。 其实记忆有不同的层面，最高的记忆是你不知道你自己已经记住了的那样一种状态，这种记忆不是一种简单的记忆。 实验：棋谱记忆将一张一个个的棋谱分别展示给专业棋手和非专业棋手，每次展示的时间大约是五到十秒，然后收回，再展示一个新的棋谱。连续展示几次以后，就问受试者能不能够把刚才的棋谱记下来。专业棋手能够完整地把棋谱说出来，而非专业棋手能记住其中的四五个棋子的位置就已经不错了。 这是不是意味着专业棋手比非专业棋手的记忆力强呢？并不是如此。当专业棋手看到一个棋谱的时候，他已经形成了一整套的信息的网络，他的大脑当中有一整套的信息的网络，新的信息一旦进入的时候，他立即将这些信息放置到一个网络，或者类似于图书馆的这样一个结构当中，迅速地编目，存在确定的地址，这个过程非常短暂，但是又非常的准确，也就是说他迅速地存储在自己的记忆区了。 而非专业棋手由于他的大脑当中没有这么一个图书馆，没有这样一套编目体系，所以当新的信息出现的时候，他没办法存储在既有的编目系统里头。所以一旦棋谱从他眼前拿走的时候，他就记不住，所谓记不住是他找不到存储的方法。如果换一种情况，这是不是说专业棋手的记忆力比非专业棋手的记忆力好呢？不是这样的，如果我们再拿几张图，不是棋谱，就是由大大小小的各种点，在他们面前展示五到十秒钟，然后让他们说出刚才看到的图形，这时候专业棋手和非专业棋手完全没有区别。 这个时候你就完全分不清谁是专业棋手，谁是非专业棋手，甚至会出现非专业棋手记图形的能力更强。原因是什么？因为专业棋手已经有一个棋谱的思维了，如果那个图形跟棋谱没有什么关系的话，他往往内心里头是抗拒的，找不到存储的地方。非专业棋手反而是因为没有这么一个成见在里头，他反而能够记住这个图形。 从这个例子我们就能看出学和习的差别在哪里，以及学习的真正目的是什么。在《哈佛幸福课》里头有一段给我印象很深，这个老师讲了三个词，Information、transportation还有Transformation，第一个词叫信息，第二个词叫搬运，第三个词叫转型、蜕变、转化。我们很多人把学习误解为尽可能多地接触新的信息，或者说尽可能地把新的信息搬运到我们的头脑中来。 大家想想，如果你的门口停了一列的货车，但是你的屋子只有九平米，这个东西你是装不来的；或者说一个所谓的图书馆，它没有编目的方法，不停地把新的书装进这个图书馆，最后这个图书馆是没用的，因为当你觉得要找某本书的时候如同不存在，说到底那就是一个装旧书的仓库而已。所谓图书馆一定要有编目系统，任何新的书来的时候，它迅速地对它进行分类，然后各就各位，放在不同的位置，当你要调用这本书的时候，它能够以最快的速度再把这本书找到。 所谓学以致用： 1、要存储知识； 2、当一个场景出现的时候，我们迅速地能调用这个知识。 你只有有这个编目系统，你新进来的信息Information才能够成为你的图书馆的一部分，你从一个小图书馆变成一个大图书馆，从一个空的图书馆变成一个藏书量很丰富的图书馆，最重要的是它是图书馆，而不是仓库。所以孔夫子说学而时习之不亦乐乎，习就是重复，在重复的过程当中建立新的连接，把新的信息植入到已有的知识网络当中，建立一种内部连接，让一个新的知识汇入到一种内在的信息网络当中，以备随时调用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[真正的学习，发生在行动之后]]></title>
      <url>%2F2017%2F04%2F08%2F%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%8C%E5%8F%91%E7%94%9F%E5%9C%A8%E8%A1%8C%E5%8A%A8%E4%B9%8B%E5%90%8E%2F</url>
      <content type="text"><![CDATA[今天读到一篇文章《真正的学习，发生在行动之后》对此文观点颇有感概，因为自己深有体会，再高大上的概念与方法论，你不能去践行，那也是无用，也许仅仅是在那一刻你仿佛觉得“悟”到而已。不亲自实践、行动，那是伪学习。下面是原文转载: 真正的学习，发生在行动之后 作者陈立飞（Spenser），坐标香港，混迹金融圈的职场老司机，50 万订阅作者，本文转载自其公众号（ID：spenserandhk)。 前段时间在香港城市大学，和负责 EMBA 项目的教授聊当下互联网下的新商业环境和传播方式。教授也是内容营销方面的专家，交流了一个小时后，他突然认真地和我说： 改天邀请你给我们 EMBA 的学员上个课吧。 我说好呀，在互联网商业，尤其在新媒体领域，我应该算是香港最懂的那一拨人。 从九龙塘回红磡的地铁上，我心里感慨，四年前也考虑过申请读个 MBA，但当时觉得学费太贵，没想到现在可以有机会给 EMBA 的人上课。 我明显感觉，这一轮互联网技术，带来全新的商业模式，更带来全新的知识革命。 二手知识迅速崩塌，一手知识热得烫手在我眼里，如今的知识，分为一手知识和二手知识。 学院派的理论知识，开始摧枯拉朽般，迅速进入半衰期，沦为二手知识。 这两年赶了不少金融圈和互联网圈的场子。比如在北京或深圳某一栋楼的联合办公空间，或在一个个创业咖啡的半开放区，今天听这个公司的 CMO 讲市场，明天听那个公司的 COO 讲运营；高级一点呢，在浦东嘉里酒店或国贸三期听投资论坛，或者就是挂着北大清华复旦的牌子，办所谓的 MBA 或总裁班课程。 然后我发现这么一个现象，越是接地气的场子，有时候往往越有干货越有料；而反倒越往上越学院派的场子，讲的内容挺水的。 看似意外，其实合理。 因为江湖上的人，都是一路浑水一路坑总结出来的一手经验；而学院上讲课的人，更多是旧知识的搬运工。 而且，我经常讲的是，过去的经验和知识，放在当下的商业场景中，多半是错的。 这年头，知识的搬运工越来越不值钱了，知识的实践者，才金光闪闪，牛逼哄哄。 为什么，因为互联网的迭代速度太快，使知识的更新也多了几个加速度。 导致的结果是，知识的二级市场，可能会玩不转了，如今的二手知识就如同新买的车，在落地那一刻，价格先贬值三分之一。 有些坑一定要自己跳过才会懂，有些浑水一定要自己趟过才深刻。一手知识，不是说出来的，是做出来的，这才会成为稀缺价值的知识一级市场。 提前行动，才可能提早获得船票经常有读者咨询我说：Spenser，我想去国外学习，但还没确定该不该去，请问，我该怎么考虑这个问题呢？ 我说，看你要学什么。 如果你想学习最前沿的理工科知识，成为耐得住寂寞的研究者，可以去；如果你只是想去个听起来更牛逼的学校给简历镀金，身份洗白，你也该去。 但是，如果你想杀入刀光剑影的互联网领域，不管是做产品或者做运营和市场，去国外“镀金” 一两年再回来的结果是 —— 你只会更加看不懂中国的互联网生态。 你还不如找个看着还挺有上升势头的互联网公司，浸淫两年，这远比你在国外学到的要多。 因为现在的很多领域，当互联成为底层架构后，都几乎全面更新了。新到什么程度呢，就是传统媒体的人，很多是看不懂新媒体的传播模式；传统金融领域的人，好些都看不太明白互联网金融的玩法。 这是真的，行业内部的人都不太懂，不是看不懂这个行业，而是看不懂互联网 —— 更何况是外行呢。前几天和“摩登中产”的创始人王鹏在望京的咖啡馆聊天，之前身为京华时报特稿记者的他，文笔甩我几十条街。 他说像他们这种以文字为生的人，对文字还是挑剔的。 很多公众号的文章，我一般不会看，但是 Spenser 你的文字，我还是能看得下去的。 我说你这是夸我还是损我。 他说身边有些极有才华的文人，不愿意抛头露脸，写得极好的文章，甚至都刻意隐去署名。 这是传统文人的骄傲，没有互联网的聒噪 —— 听着挺感动的。 可惜现实是，因为没有选择主动去拥抱时代的变化，他们的才华，无法获得互联网生态下该有的价值。 互联网拥抱的，是“新世相”的张伟，以文化商人的姿态，用市场化的文艺，让众多文艺青年簇拥在周围，嚷嚷着要改变潮水的方向。 每次技术革命都是双刃剑，带来时代的精华和糟粕，就像金钱就是一个中性词。我们要做的，是早点行动，拥抱改变，而不至于两年之后才姗姗来迟，不断抱怨 —— “红利期已经过去了。” 答应我，这么有才华的你，我们不要把世界让给傻逼们，好么。 真正的学习，只有发生在行动之后这不是一句鸡汤而已。 我经常说： 一个人真正的懒，不是懒在没有学习，而是懒在没有行动。 因为学习本身，其实还是比较舒服的被动姿势，别人用所谓高逼格的知识按摩你的灵魂，那一刻，你很满足，你仿佛进步了一点点。 但事实上，你只是在意淫知识的春药而已。 只有采取行动，才是真正和自己的懒癌作斗争，你会意识到，只有自己摸索，不断调整，最后，你突破了舒适圈，才真的进步了很多。 知识本身哪有什么用，是你的行动让你更好而已。 再进一步说，行动其实也不难，难的是持续有效的行动。 而持续行动力的产生，是内心的时刻自律和环境的不断反馈，双向作用的结果。 在我眼里，一个普通的老师，只是教了很高级的知识；而一个真正厉害的老师，除了教授知识以外，更重要的是垂范，引领，提供学习氛围，营造学习风貌。 这比提供知识本身，高级很多。 比如之前在新东方教英文的李笑来老师团队，在一块听听上做了“天天用英语”的全年课程。 我问李老师，为什么名称是“天天用英语”，而不是“天天学英语”。 好知识是用出来的，不是学出来的。 他说。 学习在于陪伴，一套 365 天全年无休的实用英语课，每晚 9 点，从英美主流媒体精选近期文章，每天陪你一小时。 为了真正体现“用”，天天用英语团队在各个城市建立了英语学习的社群，凝聚一批人，让大家在更好的英语学习氛围里，用英语交流、连接，共同成长。 成年人，想要找个既有持续性又不贵的英语学习渠道，真的很难。我在这款产品上看到了两个字：诚意。有兴趣的同学，可以点击阅读原文或识别下图二维码，直接购买，融入他们的学习社群，用出真正属于自己的好知识。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo与GitHub免费搭建个人博客（二）]]></title>
      <url>%2F2017%2F04%2F03%2FHexo%E4%B8%8EGitHub%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
      <content type="text"><![CDATA[【原创】 上篇文章介绍了GitHub Pages环境搭建，本篇文章的主题是 Hexo+NexT主题构建个人博客 关于HexoHexo：快速、简洁且高效的博客框架 ，基于Node语言开发的。具有一下特性： 超快速度 Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染 支持 Markdown 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件 一键部署 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站 丰富的插件 Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript 选择Hexo框架的原因之一它简洁主题，以及对MarkDown的支持。现在感觉下来确实不错。 闲话不多说，介绍下，我是怎么一步步构建我的博客的。PS：其实 Hexo官网介绍很详细，跟着官网操作就OK，这里只是一步步介绍我的操作步骤 安装Hexo安装前提安装Hexo之前，要确保你的电脑安装了 Node.jsGit 关于Node与Git的安装，这里不做介绍，不熟悉的童鞋可以去 Google 下 ok，Node.js 和 Git已经搞定后，第一步，打开终端，执行 Hexo 安装命令： 1$ npm install -g hexo-cli 这地方我报错，因为没有权限，重新执行：sudo npm install -g hexo-cli 搞定 安装完成后，检查是否安装成功，执行一下命令 1$ hexo -verson 正确输出 hexo 版本 12345678910111213limi ~ $ hexo -versonhexo-cli: 1.0.2os: Darwin 16.4.0 darwin x64http_parser: 2.7.0node: 6.8.1v8: 5.1.281.84uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 57.1modules: 48openssl: 1.0.2jlimi ~ $ OK , 安装成功！ 建站Hexo 安装成功后，我们可以开始构建自己的博客啦，首先初始化博客目录 1$ hexo init myblog 初始化完成后，切换到博客目录，我的目录是myblog 1$ cd myblog 执行安装命令 1$ npm install 稍等片刻，安装完成后，mybolg子目录如下12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 各个文件及文件夹含义，不做介绍，想知道请移步官方介绍。 OK , 安装完成后，我们开启服务，命令如下1$ hexo server 输出内容12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. OK，启动成功啦，默认发布地址是 http://localhost:4000/ ，当然你也可以修改端口号1$ hexo server -p --8888 OK，现在打开浏览器，就可以访问到你的博客啦，就这么简单！ Hexo 安装成功后，默认的主题是landscape，相比我更喜欢 NexT 主题，见我个人博客 先贴图 接下来，介绍更换 NexT 主题 更换 NexT 主题下载 NexTNext 官网 下载最新 NexT主题，然后把下载的目录文件名称改成 next，拷贝该目录至 博客目录/themes 目录下 修改 _config.yml 配置文件博客目录下，打开 _config.yml 文件，修改 theme 成 next 重新启动服务，刷新页面，OK，NexT主题更换成功 好啦，先介绍到这儿，下一篇文章介绍 NexT 主题配置 本文作者 : 李仁密版权声明 : 自由转载，转载请注明出处！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo与GitHub免费搭建个人博客（一）]]></title>
      <url>%2F2017%2F04%2F02%2FHexo%E4%B8%8EGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[【原创】 本来计划自己动手开发一个个人博客网站，但是考虑到需要时间成本，而且需要购买空间或者服务器，所以采用了Hexo + GitHub pages这种方式快速搭建博客。博客最终效果 环境准备Mac OS操作系统Git：Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能，更多详情请参照 Git远程操作详解Hexo：一个快速构建个人博客系统的开源框架，支持MarkDownNode：Hexo是基于Node框架开发，所以需要Node环境NexT主题：针对Hexo的一个主题，风格简洁清爽，常用插件支持GitHub Pages ：官方介绍是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github 上，你可以选择使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点阿里云域名：我是在阿里云购买了一个个人域名www.lirenmi.cn，然后与GitHub Pages域名绑定，实现个性域名访问博客，当然你也可以不购买域名，用GitHub Pages注册地址。看个人需求 GitHub Pages环境搭建第一、先要注册GitHub账户第二、创建repository第三、创建页面index.html第四、查看GitHub Pages发布地址 1、注册GitHub 访问 GitHub，注册GitHub账户，注意：userName和后面的GitHub Pages访问地址有关。注册成功后要记得邮箱激活GitHub. 2、创建repository 注册成功登陆后，点击“New repository”创建repository，如下图所示 接下来填写Repository Name，格式：[userName].github.io , userName是你注册GitHub填写的userName. 例如下图， ZhangYaru8829 是我GitHub的用户名。如下图所示 注意：Repository Name一定要是[userName].github.io 格式 然后点击 “Create repository”按钮，创建repository 注意：创建repository时，注意勾选 “Initialize this repository with a README”选项 3、创建页面index.html 创建repository成功后，来添加我们的第一个页面 index.html. 点击 “Create new file”按钮，如下图 创建index.html，增加页面代码123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;my GitHub Pages&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;我的 GitHub Pages 创建成功啦！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 创建时，注意使用默认master分支 4、查看GitHub Pages发布地址点击 “Settings” 按钮，查看 GitHub Pages 地址。 GitHub Pages发布地址 GitHub Pages搭建成功啦！ 本文作者 : 李仁密版权声明 : 自由转载，转载请注明出处！]]></content>
    </entry>

    
  
  
</search>
